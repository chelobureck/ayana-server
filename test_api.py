#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API AI Tutor Server
–ó–∞–ø—É—Å–∫: python test_api.py
"""

import asyncio
import httpx
import json

BASE_URL = "http://localhost:8000"

async def test_health():
    """–¢–µ—Å—Ç health endpoint"""
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{BASE_URL}/health")
        print(f"‚úÖ Health: {response.status_code} - {response.json()}")

async def test_auth():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    async with httpx.AsyncClient() as client:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await client.post(
            f"{BASE_URL}/auth/ensure-user",
            params={"uid": "demo123", "display_name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫"}
        )
        print(f"‚úÖ Auth ensure-user: {response.status_code} - {response.json()}")

async def test_lesson():
    """–¢–µ—Å—Ç —É—Ä–æ–∫–æ–≤"""
    async with httpx.AsyncClient() as client:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        response = await client.post(
            f"{BASE_URL}/lesson/create-session",
            json={"user_uid": "demo123", "topic": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –º–∞–ª—ã—à–µ–π"}
        )
        print(f"‚úÖ Create session: {response.status_code} - {response.json()}")
        
        if response.status_code == 200:
            session_data = response.json()
            session_id = session_data["session_id"]
            
            # –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            turn_response = await client.post(
                f"{BASE_URL}/lesson/turn",
                json={
                    "user_uid": "demo123",
                    "session_id": session_id,
                    "messages": [
                        {"role": "user", "content": "–ü–æ—á–µ–º—É 2+2=4?"}
                    ]
                }
            )
            print(f"‚úÖ Lesson turn: {turn_response.status_code}")
            if turn_response.status_code == 200:
                turn_data = turn_response.json()
                print(f"   Role: {turn_data.get('role')}")
                print(f"   Say: {turn_data.get('say')[:100]}...")
                print(f"   Animations: {turn_data.get('animations')}")

async def test_project():
    """–¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    async with httpx.AsyncClient() as client:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_response = await client.post(
            f"{BASE_URL}/lesson/create-session",
            json={"user_uid": "demo123", "topic": "–ü—Ä–æ–µ–∫—Ç"}
        )
        
        if session_response.status_code == 200:
            session_id = session_response.json()["session_id"]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_response = await client.post(
                f"{BASE_URL}/project/create",
                json={"session_id": session_id, "title": "–ú–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç"}
            )
            print(f"‚úÖ Create project: {project_response.status_code} - {project_response.json()}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Tutor Server API")
    print("=" * 50)
    
    try:
        await test_health()
        await test_auth()
        await test_lesson()
        await test_project()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except httpx.ConnectError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 